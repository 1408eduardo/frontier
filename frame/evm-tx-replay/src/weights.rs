//! Autogenerated weights for pallet_evm_tx_replay
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-18, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `bernardo-benchmarking`, CPU: `Intel(R) Xeon(R) CPU @ 2.80GHz`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("local-v"), DB CACHE: 1024

// Executed Command:
// ./target/release/mythical-node
// benchmark
// pallet
// --chain=local-v
// --steps
// 50
// --repeat
// 20
// --wasm-execution
// compiled
// --pallet
// pallet_evm_tx_replay
// --extrinsic=*
// --heap-pages=4096
// --output
// pallets/evm-tx-replay/src/weights.rs
// --template
// .maintain/template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_evm_tx_replay.
pub trait WeightInfo {
	fn set_authority() -> Weight;
	fn is_authority() -> Weight;
	fn tx_creation() -> Weight;
}

/// Weights for pallet_evm_tx_replay using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: EvmTxReplay Authority (r:0 w:1)
	/// Proof Skipped: EvmTxReplay Authority (max_values: Some(1), max_size: None, mode: Measured)
	fn set_authority() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_135_000 picoseconds.
		Weight::from_parts(5_309_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: EvmTxReplay Authority (r:1 w:0)
	/// Proof Skipped: EvmTxReplay Authority (max_values: Some(1), max_size: None, mode: Measured)
	fn is_authority() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1594`
		// Minimum execution time: 3_550_000 picoseconds.
		Weight::from_parts(3_720_000, 1594)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	fn tx_creation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 164_000 picoseconds.
		Weight::from_parts(230_000, 0)
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: EvmTxReplay Authority (r:0 w:1)
	/// Proof Skipped: EvmTxReplay Authority (max_values: Some(1), max_size: None, mode: Measured)
	fn set_authority() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_135_000 picoseconds.
		Weight::from_parts(5_309_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: EvmTxReplay Authority (r:1 w:0)
	/// Proof Skipped: EvmTxReplay Authority (max_values: Some(1), max_size: None, mode: Measured)
	fn is_authority() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1594`
		// Minimum execution time: 3_550_000 picoseconds.
		Weight::from_parts(3_720_000, 1594)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	fn tx_creation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 164_000 picoseconds.
		Weight::from_parts(230_000, 0)
	}
}